# Simplified Dockerfile for Cloud Run deployment
FROM node:18-alpine AS base

# Install dependencies
RUN apk add --no-cache dumb-init

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S appuser -u 1001

# Backend build stage
FROM base AS backend-deps
COPY backend/package*.json ./backend/
WORKDIR /app/backend
RUN npm ci --omit=dev

# Frontend build stage  
FROM base AS frontend-deps
COPY frontend/package*.json ./frontend/
WORKDIR /app/frontend
RUN npm ci

FROM frontend-deps AS frontend-build
COPY frontend/ ./
RUN npm run build

# Backend build
FROM backend-deps AS backend-build
COPY backend/tsconfig*.json ./
COPY backend/nest-cli.json ./
COPY backend/src ./src
RUN npm install -g @nestjs/cli
RUN npm run build

# Production stage
FROM base AS production
WORKDIR /app

# Copy backend dependencies
COPY --from=backend-deps --chown=appuser:nodejs /app/backend/node_modules ./node_modules
COPY --from=backend-deps --chown=appuser:nodejs /app/backend/package*.json ./

# Copy built backend
COPY --from=backend-build --chown=appuser:nodejs /app/backend/dist ./dist

# Copy built frontend
COPY --from=frontend-build --chown=appuser:nodejs /app/frontend/build ./public

# Switch to non-root user
USER appuser

# Environment variables
ENV NODE_ENV=production
ENV TFJS_BACKEND=cpu
ENV TFJS_DISABLE_WEBGL=true

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:' + (process.env.PORT || 8080) + '/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"

# Start the application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main.js"]
