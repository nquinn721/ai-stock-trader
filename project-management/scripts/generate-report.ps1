# üìä Project Progress Report Generator
# Usage: .\generate-report.ps1

param(
    [string]$OutputFormat = "console",  # console, markdown, html
    [string]$OutputFile = "",
    [switch]$Detailed = $false
)

# Set working directory to project management
$ProjectMgmtPath = Split-Path -Parent $PSScriptRoot
Set-Location $ProjectMgmtPath

# Helper function to calculate progress percentage
function Get-ProgressPercentage {
    param($completed, $total)
    if ($total -eq 0) { return 0 }
    return [math]::Round(($completed / $total) * 100, 1)
}

# Helper function to create progress bar
function Get-ProgressBar {
    param($percentage, $width = 20)
    $filled = [math]::Floor($percentage / 100 * $width)
    $empty = $width - $filled
    return "‚ñà" * $filled + "‚ñë" * $empty
}

# Read current sprint info
$currentSprint = Get-Content "sprints/current.md" -Raw
$sprintNumber = "3"  # Could parse from file

# Count stories by status
$storyFiles = Get-ChildItem "stories/*.md" -ErrorAction SilentlyContinue
$storyStats = @{
    Total = $storyFiles.Count
    Completed = 0
    InProgress = 0
    Todo = 0
    Blocked = 0
}

foreach ($file in $storyFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'üü© DONE|üü© COMPLETED') { $storyStats.Completed++ }
    elseif ($content -match 'üü® IN_PROGRESS|üü® IN PROGRESS') { $storyStats.InProgress++ }
    elseif ($content -match 'üü• BLOCKED') { $storyStats.Blocked++ }
    else { $storyStats.Todo++ }
}

# Count epics by status
$epicFiles = Get-ChildItem "epics/*.md" -ErrorAction SilentlyContinue
$epicStats = @{
    Total = $epicFiles.Count
    Completed = 0
    InProgress = 0
    Planned = 0
}

foreach ($file in $epicFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'üü© COMPLETED') { $epicStats.Completed++ }
    elseif ($content -match 'üü® IN_PROGRESS|üü® IN PROGRESS') { $epicStats.InProgress++ }
    else { $epicStats.Planned++ }
}

# Calculate overall progress
$overallProgress = Get-ProgressPercentage $storyStats.Completed $storyStats.Total

# Generate report
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

$report = @"
# üìä Stock Trading App - Progress Report

**Generated**: $timestamp  
**Current Sprint**: Sprint $sprintNumber  

## üéØ Overall Progress

``````
Project Progress: $(Get-ProgressBar $overallProgress) $overallProgress%
``````

## üìà Summary Statistics

### Stories
- **Total**: $($storyStats.Total)
- **Completed**: $($storyStats.Completed) ($(Get-ProgressPercentage $storyStats.Completed $storyStats.Total)%)
- **In Progress**: $($storyStats.InProgress)
- **Todo**: $($storyStats.Todo)
- **Blocked**: $($storyStats.Blocked)

### Epics
- **Total**: $($epicStats.Total)
- **Completed**: $($epicStats.Completed)
- **In Progress**: $($epicStats.InProgress)
- **Planned**: $($epicStats.Planned)

## üèÉ‚Äç‚ôÇÔ∏è Current Sprint Status

### Active Stories
"@

# Add current sprint stories
if ($storyStats.InProgress -gt 0) {
    $inProgressFiles = $storyFiles | Where-Object { 
        $content = Get-Content $_.FullName -Raw
        $content -match 'üü® IN_PROGRESS|üü® IN PROGRESS'
    }
    
    foreach ($file in $inProgressFiles) {
        $storyName = [System.IO.Path]::GetFileNameWithoutExtension($file.Name)
        $content = Get-Content $file.FullName -Raw
        
        # Extract story title (first # line)
        if ($content -match '#\s+(.+)') {
            $title = $matches[1]
            $report += "`n- **$storyName**: $title"
        }
    }
}

$report += @"

## üéØ Key Metrics

- **Velocity**: Tracking across sprints
- **Quality**: Test coverage and bug rates
- **Performance**: API response times
- **User Satisfaction**: Feedback scores

## üîÑ Next Steps

1. Complete current sprint stories
2. Plan next sprint priorities  
3. Review and update roadmap
4. Conduct sprint retrospective

---
*Generated by project management automation*
"@

# Output report
switch ($OutputFormat.ToLower()) {
    "console" {
        Write-Host $report
    }
    "markdown" {
        if ($OutputFile) {
            $report | Out-File -FilePath $OutputFile -Encoding UTF8
            Write-Host "Report saved to: $OutputFile" -ForegroundColor Green
        } else {
            $defaultFile = "reports/progress-report-$(Get-Date -Format 'yyyy-MM-dd').md"
            New-Item -Path (Split-Path $defaultFile) -ItemType Directory -Force | Out-Null
            $report | Out-File -FilePath $defaultFile -Encoding UTF8
            Write-Host "Report saved to: $defaultFile" -ForegroundColor Green
        }
    }
    "html" {
        # Convert markdown to basic HTML (simplified)
        $htmlReport = $report -replace '^# (.+)', '<h1>$1</h1>' `
                              -replace '^## (.+)', '<h2>$1</h2>' `
                              -replace '^\*\*(.+)\*\*:', '<strong>$1</strong>:' `
                              -replace '`([^`]+)`', '<code>$1</code>'
        
        $htmlFile = if ($OutputFile) { $OutputFile } else { "reports/progress-report-$(Get-Date -Format 'yyyy-MM-dd').html" }
        New-Item -Path (Split-Path $htmlFile) -ItemType Directory -Force | Out-Null
        $htmlReport | Out-File -FilePath $htmlFile -Encoding UTF8
        Write-Host "HTML report saved to: $htmlFile" -ForegroundColor Green
    }
}

# If detailed flag is set, show additional information
if ($Detailed) {
    Write-Host "`nüìã Detailed Story Breakdown:" -ForegroundColor Cyan
    
    foreach ($file in $storyFiles) {
        $content = Get-Content $file.FullName -Raw
        $storyName = [System.IO.Path]::GetFileNameWithoutExtension($file.Name)
        
        # Extract key information
        $status = if ($content -match 'Status\*\*:\s*([^\n]+)') { $matches[1] } else { "Unknown" }
        $priority = if ($content -match 'Priority\*\*:\s*([^\n]+)') { $matches[1] } else { "Unknown" }
        $points = if ($content -match 'Story Points\*\*:\s*([^\n]+)') { $matches[1] } else { "?" }
        
        Write-Host "  $storyName" -ForegroundColor White
        Write-Host "    Status: $status | Priority: $priority | Points: $points" -ForegroundColor Gray
    }
}

Write-Host "`n‚úÖ Report generation completed!" -ForegroundColor Green
